

apiVersion: v1
kind: ServiceAccount
metadata:
  name: rds-job-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rds-secret-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rds-secret-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rds-secret-role
subjects:
- kind: ServiceAccount
  name: rds-job-sa


---

apiVersion: v1
kind: ConfigMap
metadata:
  name: terraform-rds-config
data:
  main.tf: |
    provider "aws" {
      region = var.aws_region
    }

    variable "aws_region" {
      default = "eu-north-1"
    }

    variable "db_username" {
      type = string
    }

    variable "db_password" {
      type = string
      sensitive = true
    }

    variable "db_identifier" {
      type = string
    }

    resource "aws_db_instance" "default" {
      allocated_storage    = 20
      engine               = "postgres"
      # engine_version       = "13.7"
      instance_class       = "db.t3.micro"
      db_name              = "mydatabase"
      username             = var.db_username
      password             = var.db_password
      # db_subnet_group_name = "subnet-0b0cc2d8b401eae1e" # adjust to your subnet group
      # skip_final_snapshot  = true
      # publicly_accessible  = false
      identifier           = var.db_identifier
    }

    output "endpoint" {
      value = aws_db_instance.default.endpoint
    }

    output "username" {
      value = aws_db_instance.default.username
      sensitive = true
    }

    output "password" {
      value = aws_db_instance.default.password
      sensitive = true
    }

---

apiVersion: batch/v1
kind: Job
metadata:
  name: terraform-rds-secret-job
spec:
  template:
    spec:
      containers:
      - name: terraform
        image: hashicorp/terraform:1.6.6
        command: ["/bin/sh", "-c"]
        args:
          - |
            export $(jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' /secrets/aws-creds.json)
            cd /workspace
            terraform init
            terraform apply -auto-approve
            kubectl create secret generic rds-secret \
              --from-literal=host=$(terraform output -raw db_host) \
              --from-literal=username=$(terraform output -raw db_username) \
              --from-literal=password=$(terraform output -raw db_password)
        volumeMounts:
        - name: terraform-volume
          mountPath: /workspace
        - name: aws-creds-volume
          mountPath: /secrets
      restartPolicy: Never
      volumes:
      - name: terraform-volume
        configMap:
          name: terraform-config
      - name: aws-creds-volume
        secret:
          secretName: aws-creds-json
  backoffLimit: 1


---